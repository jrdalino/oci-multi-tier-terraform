resource "null_resource" "compute-script1" {
  depends_on = [
      oci_core_instance.webinstance1,
      oci_core_instance.webinstance2,
      oci_core_instance.dbinstance,
      oci_core_network_security_group_security_rule.dbnsgegress,
      oci_core_network_security_group_security_rule.dbnsgingress
      ]

  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = "opc"
      host        = oci_core_instance.webinstance1.public_ip
      private_key = tls_private_key.public_private_key_pair.private_key_pem
      script_path = "/home/opc/myssh.sh"
      agent       = false
      timeout     = "10m"
    }
    inline = [
      "echo '== [webinstance1] Step 1. Install Apache HTTP Server and php. Dependencies will be resolved automatically and installed.'",
      "sudo -u root yum -y update all",
      "sudo -u root yum -y install httpd",

      "echo '== [webinstance1] Step 2. Enable and start Apache HTTP Server.'",
      "sudo -u root service httpd start",

      "echo '== [webinstance1] Step 3. Allow HTTP in the local iptables firewall.'",
      "sudo -u root /sbin/iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT",
      "sudo -u root /sbin/service iptables save",

      "echo '== [webinstance1] Step 4. Install MySQL Shell.'",
      "sudo -u root yum -y install mysql"
      ]
  } 

  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = "opc"
      host        = oci_core_instance.webinstance2.public_ip
      private_key = tls_private_key.public_private_key_pair.private_key_pem
      script_path = "/home/opc/myssh.sh"
      agent       = false
      timeout     = "10m"
    }
    inline = [
      "echo '== [webinstance2] Step 1. Install Apache HTTP Server and php. Dependencies will be resolved automatically and installed.'",
      "sudo -u root yum -y update all",
      "sudo -u root yum -y install httpd",

      "echo '== [webinstance2] Step 2. Enable and start Apache HTTP Server.'",
      "sudo -u root service httpd start",

      "echo '== [webinstance2] Step 3. Allow HTTP in the local iptables firewall.'",
      "sudo -u root /sbin/iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT",
      "sudo -u root /sbin/service iptables save",

      "echo '== [webinstance2] Step 4. Install MySQL Shell.'",
      "sudo -u root yum -y install mysql"
      ]
  }  

  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = "opc"
      host        = oci_core_instance.dbinstance.public_ip
      private_key = tls_private_key.public_private_key_pair.private_key_pem
      script_path = "/home/opc/myssh.sh"
      agent       = false
      timeout     = "10m"
    }
    inline = [
      "echo '== [dbinstance] Step 1. Install MySQL'",
      "sudo -u root yum -y update all",      
      "sudo -u root dnf install -y mysql-server",

      "echo '== [dbinstance] Step 2. Run MySQL'",
      "sudo -u root systemctl start mysqld",
      "sudo -u root systemctl enable mysqld",
      "sudo -u root systemctl status mysqld",           
      "sudo -u root systemctl restart mysqld",

      "echo '== [dbinstance] Step 3. Add DB User'",
      CREATE USER 'jrdalino'@'%' IDENTIFIED BY '';
      GRANT ALL PRIVILEGES ON *.* TO 'jrdalino'@'%';
      FLUSH PRIVILEGES;
      SELECT host FROM mysql.user WHERE user = "jrdalino";

      "echo '== [dbinstance] Step 4. Allow MySQL port in the local iptables firewall.'",
      "sudo -u root firewall-cmd --zone=public --add-port=3306/tcp --permanent",
      "sudo -u root firewall-cmd --zone=public --add-port=3306/udp --permanent",      
      "sudo -u root firewall-cmd --reload",

      "echo '== [dbinstance] Step 4: Set the root password for MySQL'",
      "echo '== Example: mysql -u jrdalino -h 10.0.1.2 -p'"
      ]
  }

  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = "opc"
      host        = oci_core_instance.natinstance1.public_ip
      private_key = tls_private_key.public_private_key_pair.private_key_pem
      script_path = "/home/opc/myssh.sh"
      agent       = false
      timeout     = "10m"
    }
    inline = [
      "echo '== [natinstance1] Step 1. Create file to be used when enabling ip forwarding'",
      "sudo -u root echo "net.ipv4.ip_forward = 1" > /etc/sysctl.d/98-ip-forward.conf",
      "echo '== [natinstance1] Step 2. Run firewall commands to enable masquerading and port forwarding'",
      "sudo -u root firewall-offline-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -o ens3 -j MASQUERADE",
      "sudo -u root firewall-offline-cmd --direct --add-rule ipv4 filter FORWARD 0 -i ens3 -j ACCEPT",
      "sudo -u root /bin/systemctl restart firewalld",
      "echo '== [natinstance1] Step 3. Enable ip forwarding by setting sysctl kernel parameter'",
      "sudo -u root sysctl -p /etc/sysctl.d/98-ip-forward.conf"
      ]
  }
}

# **********************************************************************
# NAT Instance Testing
# **********************************************************************

# Step 1: SSH to DB Server

# ssh -i jrdalino.pem opc@129.146.79.28
# ssh -i jrdalino.pem opc@10.0.1.2

# Step 2: Test Outbound Internet Access. You should have access.

# $ ping 8.8.8.8
# PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
# 64 bytes from 8.8.8.8: icmp_seq=1 ttl=117 time=10.2 ms
# 64 bytes from 8.8.8.8: icmp_seq=2 ttl=117 time=9.47 ms
# ^C
# --- 8.8.8.8 ping statistics ---
# 2 packets transmitted, 2 received, 0% packet loss, time 2ms
# rtt min/avg/max/mdev = 9.474/9.841/10.208/0.367 ms

# Step 3: Private Subnet Route Table - Remove NAT Gateway Rule
# Step 4: Test Outbound Internet Access. No Access.

# Step 5: Private Subnet Route Table - Add NAT Instance Rule
# Step 6: Test Outbound Internet Access. You should have access again.

# **********************************************************************
# Use Pacemaker and Corosync to have HA (failover) of NAT instance
# **********************************************************************

# Step 1: Create 2 Nodes (2 NAT Instances above) & Pre-Configure Floating IPs > 10.0.0.254 >> DONE
$ sudo -u root ip addr add 10.0.0.254/24 brd 10.0.0.255 dev ens3 label ens3
# $ sudo -u root ip addr del 10.0.0.254/24 dev ens3

# Step 2:  Install OCI CLI >> DONE
$ sudo bash
$ bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)"
$ sudo ln -s /home/opc/bin/oci /usr/bin/oci
$ oci setup config # /home/opc/.oci/jrdalino.pem 
$ oci iam compartment list --all

# Step 3: Install & Configure Corosync/Pacemaker Cluster (stonith, quorum, resources, constraints, etc) >> DONE
$ sudo bash
$ yum -y install pacemaker pcs resource-agents
$ systemctl start pcsd.service
$ systemctl enable pcsd.service
$ echo ChangeMe1234$ | passwd --stdin hacluster
$ firewall-cmd --permanent --add-service=high-availability
$ firewall-cmd --reload

# Step 4: Backup & Update IPaddr2 configuration file >> DONE
$ cp /usr/lib/ocf/resource.d/heartbeat/IPaddr2 /usr/lib/ocf/resource.d/heartbeat/IPaddr2.ORIG
$ sudo bash
sed -i '64i\##### OCI vNIC variables\' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '65i\server="`hostname -s`"\' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '66i\node1vnic="ocid1.vnic.oc1.phx.abyhqljsko67lhkvdvy7z7y6tv5k5ds2u2mp265s2yynobt3hrc6ousg5vta"\' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '67i\node2vnic="ocid1.vnic.oc1.phx.abyhqljszffumuhn73plig4dlbjuu4ftk4nhhjq7okah573gyhtihw4qs7pq"\' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '68i\vnicip="10.0.0.254"\' /usr/lib/ocf/resource.d/heartbeat/IPaddr2

sed -i '614i\##### OCI/IPaddr Integration\' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '615i\ if [ $server = "nat-server-1" ]; then\' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '616i\ /root/bin/oci network vnic assign-private-ip --unassign-if-already-assigned --vnic-id $node1vnic  --ip-address $vnicip \' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '617i\ else \' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '618i\ /root/bin/oci network vnic assign-private-ip --unassign-if-already-assigned --vnic-id $node2vnic  --ip-address $vnicip \' /usr/lib/ocf/resource.d/heartbeat/IPaddr2
sed -i '619i\ fi \' /usr/lib/ocf/resource.d/heartbeat/IPaddr2

# Step 5: Configure & Validate the cluster. Run on Node1 only >> DONE
$ sudo bash
pcs cluster auth nat-server-1 nat-server-2 -u hacluster -p ChangeMe1234$ --force
pcs cluster setup --force --name virtualrouter nat-server-1 nat-server-2
pcs cluster start --all
pcs property set stonith-enabled=false
pcs property set no-quorum-policy=ignore
pcs resource defaults migration-threshold=1
pcs resource create Cluster_VIP ocf:heartbeat:IPaddr2 ip=10.0.0.254 cidr_netmask=24 op monitor interval=20s
systemctl enable pacemaker
systemctl enable corosync
pcs status

# Step 6: Check out Pacemaker Corosync UI >> DONE
https://129.146.79.28:2224/managec/pacemaker1/main#/resources/Cluster_VIP

# Step 7: Simulate failover >> DONE
nat-server-1: $ ip address show
nat-server-2: $ ip address show
db-server:    $ ping 10.0.0.254
nat-server-1: $ pcs status
nat-server-1: $ pcs resource move Cluster_VIP nat-server-2
nat-server-1: $ pcs status
db-server:    $ ping 10.0.0.254
nat-server-2: $ address show
nat-server-1: $ ip address show